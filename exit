[33mcommit f5a8e7ab95b8e697e7cefbfe07d2eedf64072732[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: Seamus Donnellan <donnellan0007@gmail.com>
Date:   Mon Oct 19 17:02:16 2020 +1100

    Installation files

[1mdiff --git a/build/exe.win32-3.7/lib/PySimpleGUI-4.30.0.dist-info/INSTALLER b/build/exe.win32-3.7/lib/PySimpleGUI-4.30.0.dist-info/INSTALLER[m
[1mnew file mode 100644[m
[1mindex 0000000..a1b589e[m
[1m--- /dev/null[m
[1m+++ b/build/exe.win32-3.7/lib/PySimpleGUI-4.30.0.dist-info/INSTALLER[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mpip[m
[1mdiff --git a/build/exe.win32-3.7/lib/PySimpleGUI-4.30.0.dist-info/METADATA b/build/exe.win32-3.7/lib/PySimpleGUI-4.30.0.dist-info/METADATA[m
[1mnew file mode 100644[m
[1mindex 0000000..7eb232c[m
[1m--- /dev/null[m
[1m+++ b/build/exe.win32-3.7/lib/PySimpleGUI-4.30.0.dist-info/METADATA[m
[36m@@ -0,0 +1,758 @@[m
[32m+[m[32mMetadata-Version: 2.1[m
[32m+[m[32mName: PySimpleGUI[m
[32m+[m[32mVersion: 4.30.0[m
[32m+[m[32mSummary: GUI SDK Launched in 2018. It's 2020 and PySimpleGUI is actively developed and supported. Super-simple to create custom GUI's. 200+ Demo programs & Cookbook for rapid start. Extensive documentation. Main doc is www.PySimpleGUI.org.  Examples using Machine Learning(GUI, OpenCV Integration,  Chatterbot), Rainmeter Style Floating Desktop Widgets, Matplotlib + Pyplot integration, add GUI to command line scripts, PDF & Image Viewer. Great for beginners as well as advanced GUI programmers[m
[32m+[m[32mHome-page: https://github.com/PySimpleGUI/PySimpleGUI[m
[32m+[m[32mAuthor: PySimpleGUI[m
[32m+[m[32mAuthor-email: PySimpleGUI@PySimpleGUI.org[m
[32m+[m[32mLicense: UNKNOWN[m
[32m+[m[32mKeywords: GUI UI tkinter wrapper simple easy beginner novice student graphics progressbar progressmeter[m
[32m+[m[32mPlatform: UNKNOWN[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.4[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.5[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.6[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.7[m
[32m+[m[32mClassifier: Programming Language :: Python :: 3.8[m
[32m+[m[32mClassifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)[m
[32m+[m[32mClassifier: Topic :: Multimedia :: Graphics[m
[32m+[m[32mClassifier: Operating System :: OS Independent[m
[32m+[m[32mDescription-Content-Type: text/markdown[m
[32m+[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/Logo%20with%20text%20for%20GitHub%20Top.png" alt="Python GUIs for Humans">[m
[32m+[m[32m  <h2 align="center">Python GUIs for Humans</h2>[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m[32mTransforms the tkinter, Qt, WxPython, and Remi (browser-based) GUI frameworks into a simpler interface.  The window definition is simplified by using Python core data types understood by beginners (lists and dictionaries). Further simplification happens by changing event handling from a callback-based model to a message passing one.[m[41m  [m
[32m+[m
[32m+[m[32mYour code is not _required_ to have an object oriented architecture which makes the package usable by a larger audience. While the architecture is simple to understand, it does not *necessarily* limit you to only simple problems.[m[41m  [m
[32m+[m
[32m+[m[32mSome programs are not well-suited for PySimpleGUI however.  By definition, PySimpleGUI implements a subset of the underlying GUI frameworks' capabilities.  It's difficult to define exactly which programs are well suited for PySimpleGUI and which are not.  It depends on the details of your program.  Duplicating Excel in every detail is an example of something not well suited for PySimpleGUI.[m
[32m+[m
[32m+[m[32m[Japanese version of this readme](https://github.com/PySimpleGUI/PySimpleGUI/blob/master/readme.ja.md).[m
[32m+[m
[32m+[m[32m<hr>[m
[32m+[m
[32m+[m[32m# Statistics :chart_with_upwards_trend:[m
[32m+[m
[32m+[m[32m## PyPI Installs[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32mtkinter <img src="http://pepy.tech/badge/pysimplegui?color=blue&style=for-the-badge" width="100px">[m
[32m+[m[32mtkinter 2.7 <img src="https://pepy.tech/badge/pysimplegui27?color=blue&style=for-the-badge"><br>[m
[32m+[m[32mQt <img src="https://pepy.tech/badge/pysimpleguiqt?color=blue&style=for-the-badge">[m
[32m+[m[32mWxPython<img src="https://pepy.tech/badge/pysimpleguiwx?color=blue&style=for-the-badge">[m
[32m+[m[32mWeb (Remi) <img src="https://pepy.tech/badge/pysimpleguiweb?color=blue&style=for-the-badge">[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m
[32m+[m[32m## GitHub[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m<a href=""><img src="https://img.shields.io/github/issues-raw/PySimpleGUI/PySimpleGUI?color=blue&style=for-the-badge" alt="img" width="180px"></a>[m
[32m+[m[32m<a href=""><img src="https://img.shields.io/github/issues-closed-raw/PySimpleGUI/PySimpleGUI?color=blue&style=for-the-badge" alt="img"  width="200px"></a>[m
[32m+[m[32m<a href=""><img src="https://img.shields.io/github/commit-activity/m/PySimpleGUI/PySimpleGUI.svg?color=blue&style=for-the-badge" alt="img"  width="260px"></a>[m
[32m+[m[32m<a href=""><img src="https://img.shields.io/github/last-commit/PySimpleGUI/PySimpleGUI.svg?color=blue&style=for-the-badge" alt="img"width="200px"></a>[m
[32m+[m[32m<a href=""><img src="http://ForTheBadge.com/images/badges/makes-people-smile.svg" alt="img"width="190px"></a>[m
[32m+[m[32m<a href=""><img src="https://img.shields.io/github/stars/PySimpleGUI/PySimpleGUI.svg?style=social&label=Star&maxAge=2592000" alt="img"width="140x"></a>[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://github-readme-stats.vercel.app/api/?username=PySimpleGUI&bg_color=3e7bac&title_color=ffdd55&icon_color=ffdd55&text_color=ffdd55&show_icons=true&count_private=true">[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m[32m## Most Recent PyPI Version[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32mtkinter[m
[32m+[m[32m<a href="pypi tkinter"><img src="https://img.shields.io/pypi/v/pysimplegui.svg?style=for-the-badge&color=red" alt="img" align="center" width="150px"></a>[m
[32m+[m[32mQt[m
[32m+[m[32m<a href="https://img.shields.io/pypi/v/pysimpleguiqt.svg?style=for-the-badge"><img src="https://img.shields.io/pypi/v/pysimpleguiqt.svg?style=for-the-badge"  alt="img" align="center" width="150px"></a>[m
[32m+[m[32mWeb[m
[32m+[m[32m<a href="https://img.shields.io/pypi/v/pysimpleguiweb.svg?style=for-the-badge"><img src="https://img.shields.io/pypi/v/pysimpleguiweb.svg?style=for-the-badge"  alt="img" align="center" width="150px"></a>[m
[32m+[m[32mWxPython[m
[32m+[m[32m<a href="https://img.shields.io/pypi/v/pysimpleguiwx.svg?style=for-the-badge"><img src="https://img.shields.io/pypi/v/pysimpleguiwx.svg?style=for-the-badge"  alt="img" align="center" width="150px"></a>[m
[32m+[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m[32m<hr>[m
[32m+[m
[32m+[m[32m# What Is PySimpleGUI :question:[m
[32m+[m
[32m+[m[32mPySimpleGUI is a Python package that enables Python programmers of all levels to create GUIs.  You specify your GUI window using a "layout" which contains widgets (they're called "Elements" in PySimpleGUI).  Your layout is used to create a window using one of the 4 supported frameworks to display and interact with your window.  Supported frameworks include tkinter, Qt, WxPython, or Remi. The term "wrapper" is sometimes used for these kinds of packages.[m
[32m+[m
[32m+[m[32mYour PySimpleGUI code is simpler and shorter than writing directly using the underlying framework because PySimpleGUI implements much of the "boilerplate code" for you.  Additionally, interfaces are simplified to require as little code as possible to get the desired result.  Depending on the program and framework used, a PySimpleGUI program may require 1/2 to 1/10th amount of code to create an identical window using one of the frameworks directly.[m
[32m+[m
[32m+[m[32mWhile the goal is to encapsulate/hide the specific objects and code used by the GUI framework you are running on top of, if needed you can access the frameworks' dependent widgets and windows directly. If a setting or feature is not yet exposed or accessible using the PySimpleGUI APIs, you are not walled off from the framework. You can expand capabilities without directly modifying the PySimpleGUI package itself.[m
[32m+[m
[32m+[m[32m## Bridging the "GUI Gap"[m
[32m+[m
[32m+[m[32mPython has brought a large number of people into the programming community. The number of programs and the range of areas it touches is mindboggling.  But more often than not, these and technologies are out of reach of all but a handful of people.  The majority of Python programs are "command line" based. This isn't a problem for programmer-types as we're all used to interacting with computers through a text interface.  While programmers don't have a problem with command-line interfaces, most "normal people" do.  This creates a digital divide, a "GUI Gap".[m
[32m+[m
[32m+[m[32mAdding a GUI to a program opens that program up to a wider audience. It becomes more approachable. GUIs can also make interacting with some programs easier, even for those that are comfortable with a command-line interface.  And finally, some problems require a GUI.[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/GUI%20Gap%202020.png" width="600px">[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m
[32m+[m[32m<hr>[m
[32m+[m
[32m+[m[32m# About Me :wave:[m
[32m+[m
[32m+[m[32mHi there!  I'm Mike.  You'll find me right here, on the PySimpleGUI GitHub, solving problems and continuously pushing PySimpleGUI forward.  I've dedicated my days, nights, and weekends to the project and PySimpleGUI users.  Our successes are ultimately shared.  I'm successful when you're successful.[m[41m  [m
[32m+[m
[32m+[m[32mWhile a relative newcomer to Python, I've been writing software since the 70s.  The majority of my career was spent creating products in Silicon Valley. I bring to PySimpleGUI the same professionalism and dedication as I did to the corporate products I developed. You are my customers now.[m
[32m+[m
[32m+[m
[32m+[m[32m## Project Goals :goal_net:[m
[32m+[m
[32m+[m[32mTwo of the more important goals of the PySimpleGUI project:[m
[32m+[m
[32m+[m[32m* Having fun[m
[32m+[m[32m* Your success[m[41m [m
[32m+[m
[32m+[m[32m**Fun** as a goal on a serious project sounds odd, but it's a serious goal. I find writing these GUI programs to be a lot of fun. One reason is how little time it takes to write a complete solution. If we're not enjoying the process then someone's going to give up.[m[41m [m
[32m+[m
[32m+[m[32mThere is a significant amount of documentation, a cookbook, 100's of demo programs to get you immediately running, a detailed call reference, YouTube videos, online Trinket demos, and more... all working to create... a fun experience.[m
[32m+[m
[32m+[m[32m**Your Success** is a shared goal.  PySimpleGUI was built for developers. You're my peeps. It's been an unexpected reward to see the results of the combined effort of users and PySimpleGUI. Use the documentation & other materials to help build your application.  If you run into trouble, help is available by opening on [Issue on the PySimpleGUI GitHub](http://Issues.PySimpleGUI.org).  Take a look at the section on Support below.[m
[32m+[m
[32m+[m[32m<hr>[m
[32m+[m
[32m+[m[32m# Educational Resources :books:[m
[32m+[m
[32m+[m[32mwww.PySimpleGUI.org is easy to remember and is where the documentation is located. You'll find tabs across the top that represent several different documents. The documentation is located on "Read The Docs" so that there is a table of contents for each document and they are easy to search.[m
[32m+[m
[32m+[m[32mThere are 100s of pages of written documentation and 100s of example programs that will help you be effective very quickly.  Rather than requiring days or weeks of investment to learn a single GUI package, you may be able to complete your project in a single afternoon when using PySimpleGUI.[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m## Example 1 - The One-Shot Window[m
[32m+[m
[32m+[m[32mThis type of program is called a "one-shot" window because the window is displayed one time, the values collected, and then it is closed.  It doesn't remain open for a long time like you would in a Word Processor.[m
[32m+[m
[32m+[m[32m### Anatomy of a Simple PySimpleGUI Program[m
[32m+[m
[32m+[m[32mThere are 5 sections to a PySimpleGUI program[m
[32m+[m
[32m+[m[32m```python[m
[32m+[m[32mimport PySimpleGUI as sg                        # Part 1 - The import[m
[32m+[m
[32m+[m[32m# Define the window's contents[m
[32m+[m[32mlayout = [  [sg.Text("What's your name?")],     # Part 2 - The Layout[m
[32m+[m[32m            [sg.Input()],[m
[32m+[m[32m            [sg.Button('Ok')] ][m
[32m+[m
[32m+[m[32m# Create the window[m
[32m+[m[32mwindow = sg.Window('Window Title', layout)      # Part 3 - Window Defintion[m
[32m+[m
[32m+[m[32m# Display and interact with the Window[m
[32m+[m[32mevent, values = window.read()                   # Part 4 - Event loop or Window.read call[m
[32m+[m
[32m+[m[32m# Do something with the information gathered[m
[32m+[m[32mprint('Hello', values[0], "! Thanks for trying PySimpleGUI")[m
[32m+[m
[32m+[m[32m# Finish up by removing from the screen[m
[32m+[m[32mwindow.close()                                  # Part 5 - Close the Window[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThe code produces this window[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/ex1-tkinter.jpg">[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m
[32m+[m[32m<hr>[m
[32m+[m
[32m+[m[32m## Example 2 - Interactive Window[m
[32m+[m
[32m+[m[32mIn this example, our window will remain on the screen until the user closes the window or clicks the Quit button.  The main difference between the one-shot window you saw earlier and an interactive window is the addition of an "Event Loop". The Event Loop reads events and inputs from your window.  The heart of your application lives in the event loop.[m
[32m+[m
[32m+[m
[32m+[m[32m```python[m
[32m+[m[32mimport PySimpleGUI as sg[m
[32m+[m
[32m+[m[32m# Define the window's contents[m
[32m+[m[32mlayout = [[sg.Text("What's your name?")],[m
[32m+[m[32m          [sg.Input(key='-INPUT-')],[m
[32m+[m[32m          [sg.Text(size=(40,1), key='-OUTPUT-')],[m
[32m+[m[32m          [sg.Button('Ok'), sg.Button('Quit')]][m
[32m+[m
[32m+[m[32m# Create the window[m
[32m+[m[32mwindow = sg.Window('Window Title', layout)[m
[32m+[m
[32m+[m[32m# Display and interact with the Window using an Event Loop[m
[32m+[m[32mwhile True:[m
[32m+[m[32m    event, values = window.read()[m
[32m+[m[32m    # See if user wants to quit or window was closed[m
[32m+[m[32m    if event == sg.WINDOW_CLOSED or event == 'Quit':[m
[32m+[m[32m        break[m
[32m+[m[32m    # Output a message to the window[m
[32m+[m[32m    window['-OUTPUT-'].update('Hello ' + values['-INPUT-'] + "! Thanks for trying PySimpleGUI")[m
[32m+[m
[32m+[m[32m# Finish up by removing from the screen[m
[32m+[m[32mwindow.close()[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThis is the window that Example 2 produces.[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/Example2-1.jpg">[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mAnd here's what it looks like after you enter a value into the Input field and click the Ok button.[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/Example2-2.jpg">[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m[32mLet's take a quick look at some of the differences between this example and the one-shot window.[m
[32m+[m
[32m+[m[32mFirst, you'll notice differences in the layout.  Two changes in particular are important.  One is the addition of the `key` parameter to the `Input` element and one of the `Text` elements.  A `key` is like a name for an element.  Or, in Python terms, it's like a dictionary key.  The `Input` element's key will be used as a dictionary key later in the code.[m
[32m+[m
[32m+[m[32mAnother difference is the addition of this `Text` element:[m
[32m+[m[32m```python[m
[32m+[m[32m          [sg.Text(size=(40,1), key='-OUTPUT-')],[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThere are 2 parameters, the `key` we already covered.  The `size` parameter defines the size of the element in characters.  In this case, we're indicating that this `Text` element is 40 characters wide, by 1 character high.  Notice that there is no text string specified which means it'll be blank.  You can easily see this blank row in the window that's created.[m
[32m+[m
[32m+[m[32mWe also added a button,  "Quit".[m
[32m+[m
[32m+[m[32mThe Event Loop has our familiar `window.read()` call.[m[41m [m
[32m+[m
[32m+[m[32mFollowing the read is this if statement:[m
[32m+[m[32m```python[m
[32m+[m[32m    if event == sg.WINDOW_CLOSED or event == 'Quit':[m
[32m+[m[32m        break[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThis code is checking to see if the user closed the window by clicking the "X" or if they clicked the "Quit" button.  If either of these happens, then the code will break out of the event loop.[m
[32m+[m
[32m+[m[32mIf the window wasn't closed nor the Quit button clicked, then execution continues.  The only thing that could have happened is the user clicked the "Ok" button.  The last statement in the Event Loop is this one:[m
[32m+[m
[32m+[m[32m```python[m
[32m+[m[32m    window['-OUTPUT-'].update('Hello ' + values['-INPUT-'] + "! Thanks for trying PySimpleGUI")[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThis statement updates the `Text` element that has the key `-OUTPUT-` with a string.  `window['-OUTPUT-']` finds the element with the key `-OUTPUT-`.  That key belongs to our blank `Text` element.  Once that element is returned from the lookup, then its `update` method is called.  Nearly all elements have an `update` method.  This method is used to change the value of the element or to change some configuration of the element.[m[41m [m
[32m+[m
[32m+[m[32mIf we wanted the text to be yellow, then that can be accomplished by adding a `text_color` parameter to the `update` method so that it reads:[m
[32m+[m[32m```python[m
[32m+[m[32m    window['-OUTPUT-'].update('Hello ' + values['-INPUT-'] + "! Thanks for trying PySimpleGUI",[m
[32m+[m[32m                              text_color='yellow')[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mAfter adding the `text_color` parameter this is our new resulting window:[m
[32m+[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/Example2-3.jpg">[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m
[32m+[m[32mThe parameters available for each element are documented in both the [call reference documentation](http://calls.PySimpleGUI.org) as well as the docstrings.  PySimpleGUI has extensive documentation to help you understand all of the options available to you. If you lookup the `update` method for the `Text` element, you'll find this definition for the call:[m
[32m+[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m  <img src="https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/TextUpdate.jpg">[m
[32m+[